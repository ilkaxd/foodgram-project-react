name: Foodgram-app workflow

on: [push, workflow_dispatch]

jobs:
  # tests:
  #   name: Run tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out the repository exists
  #       uses: actions/checkout@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.8

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
  #         pip install -r requirements.txt
      
  #     - name: Test with flake8 and django tests
  #       run: |
  #         # python -m flake8
  #         # pytest

  # build_and_push_to_docker_hub:
  #   name: Build project and push it to docker hub
  #   runs-on: ubuntu-latest
  #   needs: [tests]
  #   steps:
  #   - name: Check out
  #     uses: actions/checkout@v2

  #   - name: Set up Docker Build
  #     uses: docker/setup-buildx-action@v1

  #   - name: Login to Docker 
  #     uses: docker/login-action@v1
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Push backend to Docker Hub
  #     uses: docker/build-push-action@v2
  #     with:
  #       push: true
  #       context: ./backend
  #       tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  #   - name: Push frontend to Docker Hub
  #     uses: docker/build-push-action@v2
  #     with:
  #       push: true
  #       context: ./frontend
  #       tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  # deploy:
  #   name: Deploy server on Yandex.Cloud
  #   runs-on: ubuntu-latest
  #   needs: [build_and_push_to_docker_hub]
  #   steps:
  #     - name: Check out
  #       uses: actions/checkout@v2

  #     - name: Copy files via SSH
  #       uses: appleboy/scp-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         passphrase: ${{ secrets.PASSPHRASE }}
  #         source: "infra/,data/,docs/"
  #         target: "foodgram"
  #         overwrite: true

  #     - name: Executing remote ssh commands to deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         passphrase: ${{ secrets.PASSPHRASE }}
  #         scripts: |
  #           cd foodgram/infra/

  #           sudo docker-compose down
            
  #           sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
  #           sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  #           rm .env -f
  #           touch .env
  #           echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
  #           echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
  #           echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
  #           echo DB_NAME=${{ secrets.DB_NAME }} >> .env
  #           echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #           echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #           echo DB_HOST=${{ secrets.DB_HOST }} >> .env 
  #           echo DB_PORT=${{ secrets.DB_PORT }} >> .env
  #           echo DOMAIN_NAME=${{ secrets.DOMAIN_NAME }} >> .env

  #           sudo docker-compose up -d --build

  #           sudo docker-compose exec -T backend python manage.py makemigrations --noinput
  #           sudo docker-compose exec -T backend python manage.py migrate --noinput
  #           sudo docker-compose exec -T backend python manage.py collectstatic --noinput

  send_message:
    name: Send message to telegram
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!