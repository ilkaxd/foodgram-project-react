name: Foodgram-app workflow

on: [push, workflow_dispatch]

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository exists
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r requirements.txt
      
      - name: Test with flake8 and django tests
        run: |
          # python -m flake8
          # pytest

  build_and_push_to_docker_hub:
    name: Build project and push it to docker hub
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
    - name: Check out
      uses: actions/checkout@v2

    - name: Set up Docker Build
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker 
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push backend to Docker Hub
      uses: docker/build-push-action@v2
      with:
        push: true
        context: ./backend
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

    - name: Push frontend to Docker Hub
      uses: docker/build-push-action@v2
      with:
        push: true
        context: ./frontend
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    name: Deploy server on Yandex.Cloud
    runs-on: ubuntu-latest
    needs: [build_and_push_to_docker_hub]
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Copy files via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "infra/,data/,docs/"
          target: "foodgram"
          overwrite: true

      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd foodgram/infra/

            rm .env -f
            touch .env

            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env

            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env 
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env

            echo BASE_URL=${{ secrets.BASE_URL }} >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env

            echo TIME_ZONE=${{ secrets.TIME_ZONE }} >> .env

            echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env
            echo EMAIL_PASSWORD=${{ secrets.EMAIL_HOST_USER }} >> .env
            echo EMAIL_HOST=${{ secrets.EMAIL_HOST_USER }} >> .env
            echo EMAIL_PORT=${{ secrets.EMAIL_HOST_USER }} >> .env
            echo EMAIL_USE_TLS=${{ secrets.EMAIL_HOST_USER }} >> .env

            echo SESSION_COOKIE_SECURE=${{ secrets.SESSION_COOKIE_SECURE }} >> .env
            echo CSRF_COOKIE_SECURE=${{ secrets.CSRF_COOKIE_SECURE }} >> .env
            echo SECURE_CONTENT_TYPE_NOSNIFF=${{ secrets.SECURE_CONTENT_TYPE_NOSNIFF }} >> .env
            echo SECURE_BROWSER_XSS_FILTER=${{ secrets.SECURE_BROWSER_XSS_FILTER }} >> .env

            echo DOMAIN=${{ secrets.DOMAIN }} >> .env
            echo ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }} >> .env

            # sudo docker-compose down

            # sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
            # sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

            # sudo docker-compose up -d --build

            # sudo docker-compose exec -T backend python manage.py makemigrations --noinput
            # sudo docker-compose exec -T backend python manage.py migrate --noinput
            # sudo docker-compose exec -T backend python manage.py collectstatic --noinput

  send_message:
    name: Send message to telegram
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!